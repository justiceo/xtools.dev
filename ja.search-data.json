{"/ja/docs/":{"data":{"":"👋 こんにちは！Hextraのドキュメンテーションへようこそ！","hextraとは#Hextraとは？":"Hextraは、[Tailwind CSS][tailwind-css]を使用して構築された、モダンで高速かつ機能豊富な[Hugo][hugo]テーマです。ドキュメンテーション、ブログ、ウェブサイトのための美しいウェブサイトを構築するために設計されており、さまざまな要件に対応するための機能と柔軟性を提供します。","次に#次に":"以下のセクションに進んで、すぐに始めましょう：\nはじめにHextraを使用してウェブサイトを作成する方法を学ぶ ","特徴#特徴":" 美しいデザイン - Nextraにインスパイアされ、Tailwind CSSを活用してモダンなデザインを提供し、サイトを際立たせます。 レスポンシブレイアウトとダークモード - モバイル、タブレット、デスクトップなど、すべてのデバイスで美しく表示されます。また、ダークモードもサポートされており、さまざまな照明条件に対応します。 高速で軽量 - 単一のバイナリファイルに収められた超高速の静的サイトジェネレータであるHugoを採用し、Hextraはそのフットプリントを最小限に抑えています。JavaScriptやNode.jsは必要ありません。 全文検索 - FlexSearchを利用したオフライン全文検索が組み込まれており、追加の設定は不要です。 機能豊富 - Markdown、シンタックスハイライト、LaTeX数式、ダイアグラム、ショートコード要素など、コンテンツを強化するための機能を提供します。目次、パンくずリスト、ページネーション、サイドバーナビゲーションなどが自動生成されます。 多言語対応とSEO対応 - Hugoの多言語モードを使用して、多言語サイトを簡単に作成できます。SEOタグ、Open Graph、Twitter Cardsのサポートも標準で提供されます。 ","質問やフィードバックは#質問やフィードバックは？":" ❓ Hextraはまだ活発に開発中です。 質問やフィードバックがありますか？issueを開いてお気軽にお知らせください！ "},"title":"ドキュメンテーション"},"/ja/docs/advanced/":{"data":{"":"このセクションでは、テーマの上級者向けトピックをカバーします。\n多言語対応 カスタマイズ コメントシステム "},"title":"上級者向け"},"/ja/docs/advanced/comments/":{"data":{"":"Hextraは、サイトにコメントシステムを追加することをサポートしています。 現在、giscusがサポートされています。","giscus#giscus":"giscusは、GitHub Discussionsを利用したコメントシステムです。無料でオープンソースです。\ngiscusを有効にするには、サイトの設定ファイルに以下を追加する必要があります：\nhugo.yamlparams: comments: enable: false type: giscus giscus: repo: \u003cリポジトリ\u003e repoId: \u003cリポジトリID\u003e category: \u003cカテゴリ\u003e categoryId: \u003cカテゴリID\u003e giscusの設定は、giscus.appのウェブサイトから構築できます。詳細もそこで確認できます。\n特定のページでコメントを有効または無効にするには、ページのフロントマターに以下を追加します：\ncontent/docs/about.md--- title: について comments: true --- "},"title":"コメント"},"/ja/docs/advanced/customization/":{"data":{"":"Hextraは、hugo.yaml設定ファイル内でいくつかのデフォルトのカスタマイズオプションを提供し、テーマを設定できます。 このページでは、利用可能なオプションと、テーマをさらにカスタマイズする方法について説明します。","さらなるカスタマイズ#さらなるカスタマイズ":"探しているものが見つかりませんでしたか？ディスカッションを開くか、テーマに貢献してください！","カスタムcss#カスタムCSS":"カスタムCSSを追加するには、サイト内にassets/css/custom.cssファイルを作成する必要があります。Hextraはこのファイルを自動的に読み込みます。\nフォントファミリー コンテンツのフォントファミリーは、以下のようにカスタマイズできます：\nassets/css/custom.css.content { font-family: \"Times New Roman\", Times, serif; } インラインコード要素 other textと混在するテキストの色は、以下のようにカスタマイズできます：\nassets/css/custom.css.content code:not(.code-block code) { color: #c97c2e; } プライマリカラー テーマのプライマリカラーは、--primary-hue、--primary-saturation、--primary-lightness変数を設定することでカスタマイズできます：\nassets/css/custom.css:root { --primary-hue: 100deg; --primary-saturation: 90%; --primary-lightness: 50%; } テーマのさらなるカスタマイズ テーマは、公開されているCSSクラスを介してデフォルトのスタイルをオーバーライドすることでさらにカスタマイズできます。フッター要素をカスタマイズする例：\nassets/css/custom.css.hextra-footer { /* フッター要素に適用されるスタイル */ } .hextra-footer:is(html[class~=\"dark\"] *) { /* ダークモードでのフッター要素に適用されるスタイル */ } 以下のクラスを使用して、テーマのさまざまな部分をカスタマイズできます。\n一般 hextra-scrollbar - スクロールバー要素 content - ページコンテンツコンテナ ショートコード バッジ hextra-badge - バッジ要素 カード hextra-card - カード要素 hextra-card-image - カード画像要素 hextra-card-icon - カードアイコン要素 hextra-card-subtitle - カードサブタイトル要素 カードグリッド hextra-cards - カードグリッドコンテナ Jupyter Notebook hextra-jupyter-code-cell - Jupyterコードセルコンテナ hextra-jupyter-code-cell-outputs-container - Jupyterコードセル出力コンテナ hextra-jupyter-code-cell-outputs - Jupyterコードセル出力div要素 PDF hextra-pdf - PDFコンテナ要素 ステップ steps - ステップコンテナ タブ hextra-tabs-panel - タブパネルコンテナ hextra-tabs-toggle - タブトグルボタン ファイルツリー hextra-filetree - ファイルツリーコンテナ フォルダ hextra-filetree-folder - ファイルツリーフォルダコンテナ ナビゲーションバー nav-container - ナビゲーションバーコンテナ nav-container-blur - ナビゲーションバーコンテナのぼかし要素 hamburger-menu - ハンバーガーメニューボタン フッター hextra-footer - フッター要素 hextra-custom-footer - カスタムフッターセクションコンテナ 検索 search-wrapper - 検索ラッパーコンテナ search-input - 検索入力要素 search-results - 検索結果リストコンテナ 目次 hextra-toc - 目次コンテナ サイドバー mobile-menu-overlay - モバイルメニューのオーバーレイ要素 sidebar-container - サイドバーコンテナ sidebar-active-item - サイドバーのアクティブアイテム 言語スイッチャー language-switcher - 言語スイッチャーボタン language-options - 言語オプションコンテナ テーマトグル theme-toggle - テーマトグルボタン コードコピーボタン hextra-code-copy-btn-container - コードコピーボタンコンテナ hextra-code-copy-btn - コードコピーボタン コードブロック hextra-code-block - コードブロックコンテナ フィーチャーカード hextra-feature-card - フィーチャーカードリンク要素 フィーチャーグリッド hextra-feature-grid - フィーチャーグリッドコンテナ パンくずリスト パンくずリスト用の特定のクラスはありません。\nシンタックスハイライト 利用可能なシンタックスハイライトテーマのリストは、Chroma Styles Galleryで確認できます。スタイルシートは以下のコマンドで生成できます：\nhugo gen chromastyles --style=github デフォルトのシンタックスハイライトテーマをオーバーライドするには、生成されたスタイルをカスタムCSSファイルに追加します。","カスタムスクリプト#カスタムスクリプト":"すべてのページのheadの最後にカスタムスクリプトを追加するには、以下のファイルを追加します：\nlayouts/partials/custom/head-end.html ","カスタムレイアウト#カスタムレイアウト":"テーマのレイアウトは、サイトのlayoutsディレクトリ内に同じ名前のファイルを作成することでオーバーライドできます。 例えば、ドキュメント用のsingle.htmlレイアウトをオーバーライドするには、サイト内にlayouts/docs/single.htmlファイルを作成します。\n詳細については、[Hugoテンプレート][hugo-template-docs]を参照してください。","フッターのカスタムセクション#フッターのカスタムセクション":"フッターに追加のセクションを追加するには、サイト内にlayouts/partials/custom/footer.htmlファイルを作成します。\nlayouts/partials/custom/footer.html\u003c!-- ここにフッター要素を追加 --\u003e 追加されたセクションは、フッターの著作権セクションの前に追加されます。 HTMLとHugoテンプレート構文を使用して、独自のコンテンツを追加できます。\nフッターセクションで利用可能なHugo変数は、.switchesVisibleと.copyrightVisibleです。"},"title":"カスタマイズ"},"/ja/docs/advanced/multi-language/":{"data":{"":"Hextraは、Hugoの多言語モードを使用して、複数の言語でサイトを作成することをサポートしています。","さらに詳しく#さらに詳しく":" Hugo 多言語モード Hugo 多言語 Part 1: コンテンツ翻訳 Hugo 多言語 Part 2: 文字列のローカライズ ","ファイル名による翻訳管理#ファイル名による翻訳管理":"Hugoは、ファイル名による翻訳管理をサポートしています。例えば、英語のファイル content/docs/_index.md がある場合、フランス語の翻訳用に content/docs/_index.fr.md というファイルを作成できます。\ncontent docs _index.md _index.fr.md _index.ja.md 注: Hugoはコンテンツディレクトリによる翻訳もサポートしています。","メニュー項目の翻訳#メニュー項目の翻訳":"ナビゲーションバーのメニュー項目を翻訳するには、identifier フィールドを設定する必要があります：\nhugo.yamlmenu: main: - identifier: documentation name: Documentation pageRef: /docs weight: 1 - identifier: blog name: Blog pageRef: /blog weight: 2 そして、対応するi18nファイルで翻訳します：\ni18n/fr.yamldocumentation: Documentation blog: Blog ","多言語対応を有効にする#多言語対応を有効にする":"サイトを多言語対応にするためには、Hugoにサポートする言語を伝える必要があります。サイトの設定ファイルに以下を追加します：\nhugo.yamldefaultContentLanguage: en languages: en: languageName: English weight: 1 fr: languageName: Français weight: 2 ja: languageName: 日本語 weight: 3 ","文字列の翻訳#文字列の翻訳":"他の場所の文字列を翻訳するには、対応するi18nファイルに翻訳を追加する必要があります：\ni18n/fr.yamlreadMore: Lire la suite テーマで使用されている文字列のリストは、i18n/en.yaml ファイルにあります。"},"title":"多言語対応"},"/ja/docs/getting-started/":{"data":{"":"","テンプレートからクイックスタート#テンプレートからクイックスタート":" imfing/hextra-starter-template\n上記のテンプレートリポジトリを使用して、すぐに始めることができます。\nGitHub Actionsワークフローを提供しており、サイトを自動的にビルドしてGitHub Pagesにデプロイし、無料でホストすることができます。 その他のオプションについては、サイトのデプロイを確認してください。\n🌐 デモ ↗","新しいプロジェクトとして始める#新しいプロジェクトとして始める":"HugoプロジェクトにHextraテーマを追加する主な方法は2つあります：\nHugoモジュール（推奨）: 最も簡単で推奨される方法です。Hugoモジュールを使用すると、テーマを直接オンラインソースから取り込むことができます。テーマは自動的にダウンロードされ、Hugoによって管理されます。\nGitサブモジュール: または、HextraをGitサブモジュールとして追加します。テーマはGitによってダウンロードされ、プロジェクトのthemesフォルダに保存されます。\nHugoモジュールとしてHextraをセットアップ 前提条件 開始する前に、以下のソフトウェアがインストールされている必要があります：\nHugo（拡張版） Git Go 手順 新しいHugoサイトを初期化 hugo new site my-site --format=yaml モジュール経由でHextraテーマを設定 # Hugoモジュールを初期化 cd my-site hugo mod init github.com/username/my-site # Hextraテーマを追加 hugo mod get github.com/imfing/hextra hugo.yamlを設定してHextraテーマを使用するために、以下を追加します：\nmodule: imports: - path: github.com/imfing/hextra 最初のコンテンツページを作成 ホームページとドキュメントページの新しいコンテンツページを作成します：\nhugo new content/_index.md hugo new content/docs/_index.md ローカルでサイトをプレビュー hugo server --buildDrafts --disableFastRender これで、新しいサイトのプレビューがhttp://localhost:1313/で利用可能です。\nテーマを更新するには？ プロジェクト内のすべてのHugoモジュールを最新バージョンに更新するには、次のコマンドを実行します：\nhugo mod get -u Hextraを最新リリースバージョンに更新するには、次のコマンドを実行します：\nhugo mod get -u github.com/imfing/hextra 詳細については、Hugoモジュールを参照してください。\nGitサブモジュールとしてHextraをセットアップ 前提条件 開始する前に、以下のソフトウェアがインストールされている必要があります：\nHugo（拡張版） Git 手順 新しいHugoサイトを初期化 hugo new site my-site --format=yaml HextraテーマをGitサブモジュールとして追加 git submodule add https://github.com/imfing/hextra.git themes/hextra hugo.yamlを設定してHextraテーマを使用するために、以下を追加します：\ntheme: hextra 最初のコンテンツページを作成 ホームページとドキュメントページの新しいコンテンツページを作成します：\nhugo new content/_index.md hugo new content/docs/_index.md ローカルでサイトをプレビュー hugo server --buildDrafts --disableFastRender 新しいサイトのプレビューがhttp://localhost:1313/で利用可能です。\nCI/CDを使用してHugoウェブサイトをデプロイする場合、hugoコマンドを実行する前に以下のコマンドを実行することが重要です。\ngit submodule update --init このコマンドを実行しないと、テーマフォルダにHextraテーマファイルが取り込まれず、ビルドが失敗します。\nテーマを更新するには？ リポジトリ内のすべてのサブモジュールを最新のコミットに更新するには、次のコマンドを実行します：\ngit submodule update --remote Hextraを最新のコミットに更新するには、次のコマンドを実行します：\ngit submodule update --remote themes/hextra 詳細については、Gitサブモジュールを参照してください。","次へ#次へ":"以下のセクションを探索して、さらにコンテンツを追加し始めましょう：\nファイルの整理 設定 Markdown "},"title":"はじめに"},"/ja/docs/guide/":{"data":{"":"Hextraの使い方を学ぶために、以下のセクションを探索してください:\nファイルの整理 設定 Markdown シンタックスハイライト LaTeX ダイアグラム ショートコード サイトのデプロイ "},"title":"ガイド"},"/ja/docs/guide/configuration/":{"data":{"":"Hugoは、Hugoサイトのルートにあるhugo.yamlから設定を読み取ります。 この設定ファイルでは、サイトのすべての側面を設定できます。 利用可能な設定とベストプラクティスの包括的な理解を得るために、GitHub上のこのサイトの設定ファイルexampleSite/hugo.yamlをチェックしてください。","その他#その他":"ファビコン サイトのファビコンをカスタマイズするには、staticフォルダ下にアイコンファイルを配置して、テーマのデフォルトのファビコンを上書きします：\nstatic android-chrome-192x192.png android-chrome-512x512.png apple-touch-icon.png favicon-16x16.png favicon-32x32.png favicon-dark.svg favicon.ico favicon.svg site.webmanifest プロジェクトにfavicon.ico、favicon.svg、favicon-dark.svgファイルを含めて、サイトのファビコンが正しく表示されるようにします。\nfavicon.icoは一般的に古いブラウザ用ですが、favicon.svgとfavicon-dark.svgは現代のブラウザでサポートされています。 favicon.ioやfavyconなどのツールを使用して、このようなアイコンを生成できます。\nテーマ設定 theme設定を使用して、デフォルトのテーマモードとトグルボタンを設定し、訪問者がライトモードとダークモードを切り替えられるようにします。\nhugo.yamlparams: theme: # light | dark | system default: system displayToggle: true theme.defaultのオプション：\nlight - 常にライトモードを使用 dark - 常にダークモードを使用 system - オペレーティングシステムの設定と同期（デフォルト） theme.displayToggleパラメータを使用して、テーマを変更するためのトグルボタンを表示できます。 trueに設定すると、訪問者はデフォルト設定を上書きしてライトモードとダークモードを切り替えることができます。\nページ幅 ページの幅は、設定ファイルのparams.page.widthパラメータでカスタマイズできます：\nhugo.yamlparams: page: # full (100%), wide (90rem), normal (1280px) width: wide 利用可能なオプションはfull、wide、normalです。デフォルトでは、ページ幅はnormalに設定されています。\n同様に、ナビゲーションバーとフッターの幅は、params.navbar.widthとparams.footer.widthパラメータでカスタマイズできます。\n検索インデックス FlexSearchによる全文検索はデフォルトで有効です。 検索インデックスをカスタマイズするには、設定ファイルでparams.search.flexsearch.indexパラメータを設定します：\nhugo.yamlparams: # 検索 search: enable: true type: flexsearch flexsearch: # ページをインデックスする方法: content | summary | heading | title index: content flexsearch.indexのオプション：\ncontent - ページの全内容（デフォルト） summary - ページの要約、詳細はHugoコンテンツ要約を参照 heading - レベル1とレベル2の見出し title - ページタイトルのみを含める 検索トークン化をカスタマイズするには、設定ファイルでparams.search.flexsearch.tokenizeパラメータを設定します：\nhugo.yamlparams: # ... flexsearch: # full | forward | reverse | strict tokenize: forward flexsearch.tokenizeのオプション：\nstrict - 単語全体をインデックス forward - 前方方向に単語を増分的にインデックス reverse - 両方向に単語を増分的にインデックス full - すべての可能な組み合わせをインデックス 検索インデックスからページを除外するには、ページのフロントマターでexcludeSearch: trueを設定します：\ncontent/docs/guide/configuration.md--- title: 設定 excludeSearch: true --- Googleアナリティクス Googleアナリティクスを有効にするには、hugo.yamlでservices.googleAnalytics.IDフラグを設定します：\nhugo.yamlservices: googleAnalytics: ID: G-MEASUREMENT_ID ","サイドバー#サイドバー":"メインサイドバー メインサイドバーは、コンテンツディレクトリの構造から自動的に生成されます。 詳細については、ファイルの整理ページを参照してください。\n左サイドバーから単一のページを除外するには、ページのフロントマターでsidebar.excludeパラメータを設定します：\ncontent/docs/guide/configuration.md--- title: 設定 sidebar: exclude: true --- 追加リンク サイドバーの追加リンクは、設定ファイルのmenu.sidebarセクションで定義されます：\nhugo.yamlmenu: sidebar: - name: その他 params: type: separator weight: 1 - name: \"について\" pageRef: \"/about\" weight: 2 - name: \"Hugo Docs ↗\" url: \"https://gohugo.io/documentation/\" weight: 3 ","ナビゲーション#ナビゲーション":"メニュー 右上のメニューは、設定ファイルのmenu.mainセクションで定義されます：\nhugo.yamlmenu: main: - name: ドキュメント pageRef: /docs weight: 1 - name: ブログ pageRef: /blog weight: 2 - name: について pageRef: /about weight: 3 - name: 検索 weight: 4 params: type: search - name: GitHub weight: 5 url: \"https://github.com/imfing/hextra\" params: icon: github メニュー項目にはさまざまなタイプがあります：\npageRefを使用してサイト内のページにリンク - name: ドキュメント pageRef: /docs urlを使用して外部URLにリンク - name: GitHub url: \"https://github.com\" type: searchを使用して検索バーを表示 - name: 検索 params: type: search アイコン - name: GitHub params: icon: github これらのメニュー項目は、weightパラメータを設定して並べ替えることができます。\nロゴとタイトル デフォルトのロゴを変更するには、hugo.yamlを編集し、staticディレクトリ下のロゴファイルへのパスを追加します。 オプションで、ロゴをクリックしたときにユーザーがリダイレクトされるリンクや、ロゴの幅と高さをピクセル単位で設定できます。\nhugo.yamlparams: navbar: displayTitle: true displayLogo: true logo: path: images/logo.svg dark: images/logo-dark.svg link: / width: 40 height: 20 ","フッター#フッター":"著作権 ウェブサイトのフッターに表示される著作権テキストを変更するには、i18n/en.yamlという名前のファイルを作成します。 このファイルに、以下のように新しい著作権テキストを指定します：\ni18n/en.yamlcopyright: \"© 2024 YOUR TEXT HERE\" 参考として、GitHubリポジトリにi18n/en.yamlファイルの例があります。また、著作権テキストにMarkdown形式を使用することもできます。","右サイドバー#右サイドバー":"目次 目次は、コンテンツファイルの見出しから自動的に生成されます。ページのフロントマターでtoc: falseを設定することで無効にできます。\ncontent/docs/guide/configuration.md--- title: 設定 toc: false --- ページ編集リンク ページ編集リンクを設定するには、設定ファイルでparams.editURL.baseパラメータを設定します：\nhugo.yamlparams: editURL: enable: true base: \"https://github.com/your-username/your-repo/edit/main\" 提供されたURLをルートディレクトリとして、各ページの編集リンクが自動的に生成されます。 特定のページの編集リンクを設定したい場合は、ページのフロントマターでeditURLパラメータを設定します：\ncontent/docs/guide/configuration.md--- title: 設定 editURL: \"https://example.com/edit/this/page\" --- "},"title":"設定"},"/ja/docs/guide/deploy-site/":{"data":{"":"Hugoは静的サイトを生成するため、柔軟なホスティングオプションが可能です。 このページでは、Hextraサイトをさまざまなプラットフォームにデプロイするためのガイドを提供します。","cloudflare-pages#Cloudflare Pages":" サイトのソースコードをGitリポジトリ（例：GitHub）に配置します。 Cloudflareダッシュボードにログインし、アカウントを選択します。 アカウントホームで、Workers \u0026 Pages \u003e Create application \u003e Pages \u003e Connect to Git を選択します。 リポジトリを選択し、Set up builds and deployments セクションで以下の情報を提供します： 設定 値 本番ブランチ main ビルドコマンド hugo --gc --minify ビルドディレクトリ public 詳細については、以下を確認してください：\nHugoサイトのデプロイ。 言語サポートとツール。 ","github-pages#GitHub Pages":"GitHub Pagesは、無料でウェブサイトをデプロイおよびホストするための推奨方法です。\nhextra-starter-templateを使用してサイトをブートストラップした場合、GitHub Pagesへの自動デプロイを支援するGitHub Actionsワークフローがすぐに利用可能です。\nGitHub Actionsの設定 以下は、hextra-starter-templateからの設定例です：\n.github/workflows/pages.yaml# HugoサイトをGitHub Pagesにデプロイするためのサンプルワークフロー name: Deploy Hugo site to Pages on: # デフォルトブランチへのプッシュ時に実行 push: branches: [\"main\"] # Actionsタブから手動でこのワークフローを実行可能 workflow_dispatch: # GITHUB_TOKENの権限を設定してGitHub Pagesへのデプロイを許可 permissions: contents: read pages: write id-token: write # 同時実行を1つに制限し、進行中の実行と最新のキューイングされた実行の間の実行をスキップ。 # ただし、進行中の実行はキャンセルしないでください。これらの本番デプロイを完了させたいためです。 concurrency: group: \"pages\" cancel-in-progress: false # デフォルトはbash defaults: run: shell: bash jobs: # ビルドジョブ build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.145.0 steps: - name: Checkout uses: actions/checkout@v4 with: fetch-depth: 0 # .GitInfoと.Lastmodのためにすべての履歴を取得 submodules: recursive - name: Setup Go uses: actions/setup-go@v5 with: go-version: '1.22' - name: Setup Pages id: pages uses: actions/configure-pages@v4 - name: Setup Hugo run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026\u0026 sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: Build with Hugo env: # Hugoモジュールとの最大限の互換性のために HUGO_ENVIRONMENT: production HUGO_ENV: production run: | hugo \\ --gc --minify \\ --baseURL \"${{ steps.pages.outputs.base_url }}/\" - name: Upload artifact uses: actions/upload-pages-artifact@v3 with: path: ./public # デプロイジョブ deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 リポジトリ設定で、Pages \u003e Build and deployment \u003e Source を GitHub Actions に設定します： デフォルトでは、上記のGitHub Actionsワークフロー .github/workflows/pages.yaml は、サイトが https://\u003cUSERNAME\u003e.github.io/\u003cREPO\u003e/ にデプロイされることを前提としています。\nhttps://\u003cUSERNAME\u003e.github.io/ にデプロイする場合は、--baseURL を変更します：\n.github/workflows/pages.yaml 54 55 56 57 run: | hugo \\ --gc --minify \\ --baseURL \"https://${{ github.repository_owner }}.github.io/\" 独自のドメインにデプロイする場合は、--baseURL の値を適宜変更してください。","netlify#Netlify":" コードをGitリポジトリ（GitHub、GitLabなど）にプッシュします。 プロジェクトをインポートしてNetlifyに追加します。 [hextra-starter-template][hextra-starter-template]を使用していない場合、以下の設定を手動で行います： ビルドコマンドを hugo --gc --minify に設定します。 公開ディレクトリを public に指定します。 環境変数 HUGO_VERSION を追加し、0.145.0 に設定するか、netlify.toml ファイルに設定します。 デプロイします！ 詳細については、NetlifyでのHugoを確認してください。","vercel#Vercel":" コードをGitリポジトリ（GitHub、GitLabなど）にプッシュします。 Vercelダッシュボードに移動し、Hugoプロジェクトをインポートします。 プロジェクトを設定し、フレームワークプリセットとしてHugoを選択します。 ビルドコマンドとインストールコマンドを上書きします： ビルドコマンドを hugo --gc --minify に設定します。 インストールコマンドを yum install golang に設定します。 "},"title":"サイトのデプロイ"},"/ja/docs/guide/diagrams/":{"data":{"":"現在、HextraはダイアグラムのためにMermaidをサポートしています。","mermaid#Mermaid":"Mermaidは、JavaScriptベースのダイアグラムおよびチャート作成ツールで、Markdownにインスパイアされたテキスト定義を取り込み、ブラウザ内でダイナミックにダイアグラムを作成します。例えば、Mermaidはフローチャート、シーケンス図、円グラフなどをレンダリングできます。\nHextraでMermaidを使用するのは、言語をmermaidに設定したコードブロックを書くのと同じくらい簡単です:\n```mermaid graph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD; ``` これは次のようにレンダリングされます:\ngraph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD; シーケンス図:\nsequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: こんにちはJohn、元気ですか？ loop 健康チェック John-\u003e\u003eJohn: 心気症と戦う end Note right of John: 理性的な思考 \u003cbr/\u003eが勝つ！ John--\u003e\u003eAlice: 元気です！ John-\u003e\u003eBob: あなたはどうですか？ Bob--\u003e\u003eJohn: とても元気です！ 詳細については、Mermaidドキュメントを参照してください。"},"title":"ダイアグラム"},"/ja/docs/guide/latex/":{"data":{"":"KaTeX\\KaTeXKATE​X は LaTeX の数式をレンダリングするために使用されます。ページのフロントマターで math を true に設定することで、ページごとに有効にすることができます。\npage.md--- title: \"LaTeX を使用した私のページ\" math: true --- 有効にすると、KaTeX のスクリプト、スタイルシート、フォントが自動的にサイトに含まれます。Markdown コンテンツ内で LaTeX 数式を使用できます。","サポートされている関数#サポートされている関数":"サポートされている関数の一覧については、KaTeX サポートされている関数 を参照してください。","例#例":"Markdown コンテンツ内で、インラインおよび別段落の LaTeX 数式がサポートされています。\nインライン page.mdこれは \\(\\sigma(z) = \\frac{1}{1 + e^{-z}}\\) インラインです。 これは σ(z)=11+e−z\\sigma(z) = \\frac{1}{1 + e^{-z}}σ(z)=1+e−z1​ インラインです。\n別段落 page.md$$F(\\omega) = \\int_{-\\infty}^{\\infty} f(t) e^{-j\\omega t} \\, dt$$ 次のようにレンダリングされます:\nF(ω)=∫−∞∞f(t)e−jωt dtF(\\omega) = \\int_{-\\infty}^{\\infty} f(t) e^{-j\\omega t} \\, dtF(ω)=∫−∞∞​f(t)e−jωtdt Important\nHugo 設定ファイルで パススルー拡張機能 を有効にして設定してください。これにより、複雑な式のレンダリング問題を回避するために、デリミタ内の生のコンテンツが保持されます。\nhugo.yamlmarkup: goldmark: extensions: passthrough: delimiters: block: [['\\[', '\\]'], ['$$', '$$']] inline: [['\\(', '\\)']] enable: true 例えば、aligned 環境を使用する場合:\npage.md$$ \\begin{aligned} \\nabla \\cdot \\mathbf{E} \u0026= \\frac{\\rho}{\\varepsilon_0} \\\\ \\nabla \\cdot \\mathbf{B} \u0026= 0 \\\\ \\nabla \\times \\mathbf{E} \u0026= -\\frac{\\partial \\mathbf{B}}{\\partial t} \\\\ \\nabla \\times \\mathbf{B} \u0026= \\mu_0 \\left( \\mathbf{J} + \\varepsilon_0 \\frac{\\partial \\mathbf{E}}{\\partial t} \\right) \\end{aligned} $$ 次のようにレンダリングされます:\n∇⋅E=ρε0∇⋅B=0∇×E=−∂B∂t∇×B=μ0(J+ε0∂E∂t) \\begin{aligned} \\nabla \\cdot \\mathbf{E} \u0026= \\frac{\\rho}{\\varepsilon_0} \\\\ \\nabla \\cdot \\mathbf{B} \u0026= 0 \\\\ \\nabla \\times \\mathbf{E} \u0026= -\\frac{\\partial \\mathbf{B}}{\\partial t} \\\\ \\nabla \\times \\mathbf{B} \u0026= \\mu_0 \\left( \\mathbf{J} + \\varepsilon_0 \\frac{\\partial \\mathbf{E}}{\\partial t} \\right) \\end{aligned} ∇⋅E∇⋅B∇×E∇×B​=ε0​ρ​=0=−∂t∂B​=μ0​(J+ε0​∂t∂E​)​","化学#化学":"化学式は mhchem 拡張機能を介してサポートされています。\nインライン: HX2O\\ce{H2O}HX2​O は水です。\n別段落:\npage.md$$\\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-}$$ HgX2+→IX−HgIX2→IX−[HgXIIIX4]X2−\\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-}HgX2+IX−​HgIX2​IX−​[HgXIIIX4​]X2−"},"title":"LaTeX"},"/ja/docs/guide/markdown/":{"data":{"":"Hugoは、テキストのフォーマットやリストの作成などにMarkdown構文をサポートしています。このページでは、最も一般的なMarkdown構文の例をいくつか紹介します。","markdownの例#Markdownの例":"テキストのスタイル スタイル 構文 例 出力 太字 **太字テキスト** **太字テキスト** 太字テキスト 斜体 *斜体テキスト* *斜体テキスト* 斜体テキスト 取り消し線 ~~取り消し線テキスト~~ ~~取り消し線テキスト~~ 取り消し線テキスト 下付き文字 \u003csub\u003e\u003c/sub\u003e これは\u003csub\u003e下付き文字\u003c/sub\u003eです これは下付き文字です 上付き文字 \u003csup\u003e\u003c/sup\u003e これは\u003csup\u003e上付き文字\u003c/sup\u003eです これは上付き文字です ブロッククォート 引用元付きのブロッククォート\nメモリを共有してコミュニケーションするのではなく、コミュニケーションしてメモリを共有せよ。\n— ロブ・パイク1\nMarkdown\u003e メモリを共有してコミュニケーションするのではなく、コミュニケーションしてメモリを共有せよ。\u003cbr\u003e \u003e — \u003ccite\u003eロブ・パイク[^1]\u003c/cite\u003e [^1]: 上記の引用は、2015年11月18日のGopherfestでのロブ・パイクの[講演](https://www.youtube.com/watch?v=PAAkCSZUG1c)から抜粋したものです。 アラート New in v0.9.0 アラートは、ブロッククォート構文に基づくMarkdown拡張で、重要な情報を強調するために使用できます。 GitHubスタイルのアラートがサポートされています。 Hextraの最新バージョンとHugo v0.134.0以降を使用していることを確認してください。\nNote\nユーザーが知っておくべき有用な情報で、内容をざっと見る際にも役立ちます。\nTip\n物事をより良く、または簡単に行うための役立つアドバイス。\nImportant\nユーザーが目標を達成するために知っておくべき重要な情報。\nWarning\n問題を避けるために即座にユーザーの注意を引く必要がある緊急の情報。\nCaution\n特定のアクションのリスクやネガティブな結果についてのアドバイス。\nMarkdown\u003e [!NOTE] \u003e ユーザーが知っておくべき有用な情報で、内容をざっと見る際にも役立ちます。 \u003e [!TIP] \u003e 物事をより良く、または簡単に行うための役立つアドバイス。 \u003e [!IMPORTANT] \u003e ユーザーが目標を達成するために知っておくべき重要な情報。 \u003e [!WARNING] \u003e 問題を避けるために即座にユーザーの注意を引く必要がある緊急の情報。 \u003e [!CAUTION] \u003e 特定のアクションのリスクやネガティブな結果についてのアドバイス。 テーブル テーブルはMarkdownのコア仕様には含まれていませんが、Hugoはデフォルトでサポートしています。\n名前 年齢 ボブ 27 アリス 23 Markdown| 名前 | 年齢 | |--------|------| | ボブ | 27 | | アリス | 23 | テーブル内のインラインMarkdown 斜体 太字 コード 斜体 太字 コード Markdown| 斜体 | 太字 | コード | | -------- | -------- | ------ | | *斜体* | **太字** | `コード` | コードブロック シンタックスハイライト リスト 順序付きリスト 最初の項目 2番目の項目 3番目の項目 Markdown1. 最初の項目 2. 2番目の項目 3. 3番目の項目 順序なしリスト リスト項目 別の項目 さらに別の項目 Markdown* リスト項目 * 別の項目 * さらに別の項目 ネストされたリスト 果物 りんご オレンジ バナナ 乳製品 牛乳 チーズ Markdown* 果物 * りんご * オレンジ * バナナ * 乳製品 * 牛乳 * チーズ 画像 Markdown![風景](https://picsum.photos/800/600) キャプション付き:\nUnsplashの風景 Markdown![風景](https://picsum.photos/800/600 \"Unsplashの風景\") 上記の引用は、2015年11月18日のGopherfestでのロブ・パイクの講演から抜粋したものです。 ↩︎","学習リソース#学習リソース":" Markdownガイド Markdownチートシート Markdownチュートリアル Markdownリファレンス ","設定#設定":"HugoはMarkdownの解析にGoldmarkを使用しています。 Markdownのレンダリングは、hugo.yamlのmarkup.goldmarkで設定できます。 以下はHextraのデフォルト設定です:\nhugo.yamlmarkup: goldmark: renderer: unsafe: true highlight: noClasses: false その他の設定オプションについては、HugoのドキュメントConfigure Markupを参照してください。"},"title":"Markdown"},"/ja/docs/guide/organize-files/":{"data":{"":"","コンテンツディレクトリの設定#コンテンツディレクトリの設定":"デフォルトでは、Hugoはサイトを構築するためにルートのcontent/ディレクトリを使用します。 例えばdocs/など、異なるディレクトリをコンテンツに使用する必要がある場合は、サイト設定hugo.yamlでcontentDirパラメータを設定することで行えます。","サイドバーナビゲーション#サイドバーナビゲーション":"サイドバーナビゲーションは、コンテンツの整理に基づいて自動的に生成されます。サイドバーの順序を手動で設定するには、Markdownファイルのフロントマターでweightパラメータを使用します。\ncontent/docs/guide/_index.md--- title: Guide weight: 2 --- ℹ️ サイドバーがあまり深くならないようにすることをお勧めします。多くのコンテンツがある場合は、複数のセクションに分割することを検討してください。 ","ディレクトリ構造#ディレクトリ構造":"デフォルトでは、Hugoはcontentディレクトリ内のMarkdownファイルを検索し、ディレクトリの構造がウェブサイトの最終的な出力構造を決定します。 このサイトを例に取ります：\ncontent _index.md docs _index.md getting-started.md guide _index.md organize-files.md blog _index.md post-1.md 各_index.mdファイルは、対応するセクションのインデックスページです。他のMarkdownファイルは通常のページです。\ncontent ├── _index.md // \u003c- / ├── docs │ ├── _index.md // \u003c- /docs/ │ ├── getting-started.md // \u003c- /docs/getting-started/ │ └── guide │ ├── _index.md // \u003c- /docs/guide/ │ └── organize-files.md // \u003c- /docs/guide/organize-files/ └── blog ├── _index.md // \u003c- /blog/ └── post-1.md // \u003c- /blog/post-1/ ","パンくずナビゲーション#パンくずナビゲーション":"パンくずは、/contentのディレクトリ構造に基づいて自動生成されます。\n例えば、上記のファイル構造を考えます。その構造に基づいて、/docs/guide/organize-files/ページの上部にパンくずが自動的に表示されます：\nDocumentation \u003e Guide \u003e Organize Files パンくずリンクのタイトルをカスタマイズ デフォルトでは、各パンくずリンクはそのページのtitleパラメータに基づいて生成されます。これをカスタマイズするには、linkTitleを指定します。\n例えば、Organize Filesの代わりにFoo Barと表示したい場合：\ncontent/docs/guide/organize-files.md--- linkTitle: Foo Bar title: Organize Files --- これにより、以下のパンくずが生成されます：\nDocumentation \u003e Guide \u003e Foo Bar パンくずを非表示にする ページのフロントマターでbreadcrumbs: falseを指定することで、パンくずを完全に非表示にできます：\ncontent/docs/guide/organize-files.md--- breadcrumbs: false title: Organize Files --- ","レイアウト#レイアウト":"Hextraは、異なるコンテンツタイプに対して3つのレイアウトを提供します：\nレイアウト ディレクトリ 特徴 docs content/docs/ 構造化されたドキュメントに最適で、このセクションと同じです。 blog content/blog/ ブログ投稿用で、リスト表示と詳細記事表示の両方があります。 default その他のディレクトリ サイドバーなしの単一ページ記事表示です。 セクションの動作をビルトインレイアウトと同じにするには、セクションの_index.mdのフロントマターで希望するタイプを指定します。\ncontent/my-docs/_index.md--- title: My Docs cascade: type: docs --- 上記の設定例により、content/my-docs/内のコンテンツファイルはデフォルトでドキュメント（docsタイプ）として扱われます。","画像の追加#画像の追加":"画像を追加する最も簡単な方法は、画像ファイルをMarkdownファイルと同じディレクトリに置くことです。 例えば、my-page.mdファイルと同じディレクトリにimage.pngファイルを追加します：\ncontent docs my-page.md image.png その後、以下のMarkdown構文を使用してコンテンツに画像を追加できます：\ncontent/docs/my-page.md![](image.png) また、Hugoのページバンドル機能を利用して、画像ファイルをMarkdownファイルと一緒に整理することもできます。そのためには、my-page.mdファイルをmy-pageディレクトリに変換し、コンテンツをindex.mdというファイルに置き、画像ファイルをmy-pageディレクトリ内に置きます：\ncontent docs my-page index.md image.png content/docs/my-page/index.md![](image.png) または、画像ファイルをstaticディレクトリに置くこともできます。これにより、すべてのページで画像が利用可能になります：\nstatic images image.png content docs my-page.md 画像パスはスラッシュ/で始まり、staticディレクトリからの相対パスであることに注意してください：\ncontent/docs/my-page.md![](/images/image.png) "},"title":"ファイルの整理"},"/ja/docs/guide/shortcodes/":{"data":{"":"Hugo ショートコードは、コンテンツファイル内に埋め込まれるシンプルなスニペットで、組み込みまたはカスタムテンプレートを呼び出します。\nHextra は、コンテンツを強化するための美しいショートコードのコレクションを提供します。\nコールアウト カード 詳細 FileTree アイコン ステップ タブ Hugo と Hextra が提供する追加のショートコード:\nJupyter Notebook alpha その他 "},"title":"ショートコード"},"/ja/docs/guide/shortcodes/callout/":{"data":{"":"読者に重要な情報を示すための組み込みコンポーネントです。\nNote\nGitHubスタイルのアラートはv0.9.0以降でサポートされています。 これはMarkdown構文を活用してコールアウトをレンダリングし、コンテンツの移植性と可読性を向上させます。","使用方法#使用方法":"デフォルト 🌐 Hugoは、ブログ、ポートフォリオ、ドキュメントサイトなど、さまざまなウェブサイトを作成するために使用できます。 {{\u003c callout emoji=\"🌐\" \u003e}} Hugoは、ブログ、ポートフォリオ、ドキュメントサイトなど、さまざまなウェブサイトを作成するために使用できます。 {{\u003c /callout \u003e}} 情報 ℹ️ 最新のリリースを確認するには、GitHubをご覧ください。 {{\u003c callout type=\"info\" \u003e}} 最新のリリースを確認するには、GitHubをご覧ください。 {{\u003c /callout \u003e}} 警告 ⚠️ このAPIは次のバージョンで非推奨になります。 {{\u003c callout type=\"warning\" \u003e}} **コールアウト**は、注意を引くための短いテキストです。 {{\u003c /callout \u003e}} エラー 🚫 何か問題が発生し、爆発しそうです。 {{\u003c callout type=\"error\" \u003e}} 何か問題が発生し、爆発しそうです。 {{\u003c /callout \u003e}} ","例#例":" 👾 コールアウトは、注意を引くための短いテキストです。 ℹ️ コールアウトは、注意を引くための短いテキストです。 ⚠️ コールアウトは、注意を引くための短いテキストです。 🚫 コールアウトは、注意を引くための短いテキストです。 "},"title":"コールアウト"},"/ja/docs/guide/shortcodes/cards/":{"data":{"":"","カードパラメータ#カードパラメータ":" パラメータ 説明 link URL（内部または外部）。 title カードのタイトル見出し。 subtitle サブタイトル見出し（Markdown対応）。 icon アイコンの名前。 tag タグ内のテキスト。 tagColor タグの色: gray（デフォルト）、yellow、red、blue。 ","タグ#タグ":"カードはタグの追加をサポートしており、追加のステータス情報を表示するのに役立ちます。\nデフォルトタグ付きカード タグテキスト エラータグ付きカード タグテキスト 情報タグ付きカード タグテキスト 警告タグ付きカード タグテキスト 画像カードインターネット画像 タグテキスト {{\u003c cards \u003e}} {{\u003c card link=\"../callout\" title=\"デフォルトタグ色付きカード\" tag=\"タグテキスト\" \u003e}} {{\u003c card link=\"../callout\" title=\"デフォルト赤タグ付きカード\" tag=\"タグテキスト\" tagType=\"error\" \u003e}} {{\u003c card link=\"../callout\" title=\"青タグ付きカード\" tag=\"タグテキスト\" tagType=\"info\" \u003e}} {{\u003c card link=\"../callout\" title=\"黄色タグ付きカード\" tag=\"タグテキスト\" tagType=\"warning\" \u003e}} {{\u003c /cards \u003e}} ","使用方法#使用方法":" {{\u003c/* cards */\u003e}} {{\u003c/* card link=\"../callout\" title=\"コールアウト\" icon=\"warning\" */\u003e}} {{\u003c/* card link=\"../callout\" title=\"タグ付きカード\" icon=\"tag\" tag= \"カスタムタグ\" */\u003e}} {{\u003c/* card link=\"/\" title=\"アイコンなし\" */\u003e}} {{\u003c/* /cards */\u003e}} {{\u003c/* cards */\u003e}} {{\u003c/* card link=\"/\" title=\"画像カード\" image=\"https://source.unsplash.com/featured/800x600?landscape\" subtitle=\"Unsplashの風景画像\" */\u003e}} {{\u003c/* card link=\"/\" title=\"ローカル画像\" image=\"/images/card-image-unprocessed.jpg\" subtitle=\"staticディレクトリ下の未加工画像。\" */\u003e}} {{\u003c/* card link=\"/\" title=\"ローカル画像\" image=\"images/space.jpg\" subtitle=\"assetsディレクトリ下の画像、Hugoで処理済み。\" method=\"Resize\" options=\"600x q80 webp\" */\u003e}} {{\u003c/* /cards */\u003e}} ","例#例":" コールアウト タグ付きカード カスタムタグ アイコンなし 画像カードインターネット画像 ローカル画像staticディレクトリ下の未加工画像。 ローカル画像assetsディレクトリ下の画像、Hugoで処理済み。 ","列#列":"cardsショートコードにcolsパラメータを渡すことで、カードが広がる最大列数を指定できます。ただし、小さい画面では列は折りたたまれます。\n上部カード 下部カード 左カード 右カード {{\u003c cards cols=\"1\" \u003e}} {{\u003c card link=\"/\" title=\"上部カード\" \u003e}} {{\u003c card link=\"/\" title=\"下部カード\" \u003e}} {{\u003c /cards \u003e}} {{\u003c cards cols=\"2\" \u003e}} {{\u003c card link=\"/\" title=\"左カード\" \u003e}} {{\u003c card link=\"/\" title=\"右カード\" \u003e}} {{\u003c /cards \u003e}} ","画像カード#画像カード":"さらに、カードは画像の追加と以下のパラメータを通じた処理をサポートします:\nパラメータ 説明 image カードの画像URLを指定します。 method Hugoの画像処理メソッドを設定します。 options Hugoの画像処理オプションを設定します。 カードは3種類の画像をサポートします:\nリモート画像: imageパラメータに完全なURLを指定。 静的画像: Hugoのstatic/ディレクトリ内の相対パスを使用。 処理済み画像: Hugoのassets/ディレクトリ内の相対パスを使用。 Hextraはビルド時に画像処理が必要かどうかを自動検出し、optionsパラメータまたはデフォルト設定（Resize、800x、品質80、WebPフォーマット）を適用します。 現在サポートされているmethodはResize、Fit、Fill、Cropです。\nHugoの組み込み画像処理コマンド、メソッド、オプションの詳細については、画像処理ドキュメントを参照してください。"},"title":"カード"},"/ja/docs/guide/shortcodes/details/":{"data":{"":"折りたたみ可能なコンテンツを表示するための組み込みコンポーネント。","使い方#使い方":" {{%/* details title=\"詳細\" */%}} これは詳細のコンテンツです。 Markdownは**サポートされています**。 {{%/* /details */%}} {{%/* details title=\"クリックして表示\" closed=\"true\" */%}} これはデフォルトで非表示になります。 {{%/* /details */%}} ","例#例":" 詳細 これは詳細のコンテンツです。\nMarkdownはサポートされています。\nクリックして表示 これはデフォルトで非表示になります。 "},"title":"詳細"},"/ja/docs/guide/shortcodes/filetree/":{"data":{"":"","使用方法#使用方法":" Markdown{{\u003c/* filetree/container */\u003e}} {{\u003c/* filetree/folder name=\"content\" */\u003e}} {{\u003c/* filetree/file name=\"_index.md\" */\u003e}} {{\u003c/* filetree/folder name=\"docs\" state=\"closed\" */\u003e}} {{\u003c/* filetree/file name=\"_index.md\" */\u003e}} {{\u003c/* filetree/file name=\"introduction.md\" */\u003e}} {{\u003c/* filetree/file name=\"introduction.fr.md\" */\u003e}} {{\u003c/* /filetree/folder */\u003e}} {{\u003c/* /filetree/folder */\u003e}} {{\u003c/* filetree/file name=\"hugo.toml\" */\u003e}} {{\u003c/* /filetree/container */\u003e}} ","例#例":" content _index.md docs _index.md introduction.md introduction.fr.md hugo.toml "},"title":"FileTree"},"/ja/docs/guide/shortcodes/icon/":{"data":{"":"このショートコードをインラインで使用するには、設定でインラインショートコードを有効にする必要があります:\nhugo.yamlenableInlineShortcodes: true 利用可能なアイコンのリストは、data/icons.yaml で確認できます。","使用方法#使用方法":" {{\u003c/* icon \"github\" */\u003e}} Heroicons v1 のアウトラインアイコンがデフォルトで利用可能です。\n独自のアイコンを追加する方法 data/icons.yaml ファイルを作成し、以下の形式で独自のSVGアイコンを追加します:\ndata/icons.yamlyour-icon: \u003csvg\u003eyour icon svg content\u003c/svg\u003e その後、ショートコードで以下のように使用できます:\n{{\u003c/* icon \"your-icon\" */\u003e}} {{\u003c/* card icon=\"your-icon\" */\u003e}} ヒント: Iconify Design は、サイト用のSVGアイコンを見つけるのに最適な場所です。","例#例":" "},"title":"アイコン"},"/ja/docs/guide/shortcodes/jupyter/":{"data":{"":" Jupyter Notebook をショートコード経由で含める実験的な機能です。すべてのセルタイプがサポートされているわけではありません。 Jupyter Notebook は、Project Jupyter の言語に依存しない HTML ノートブックアプリケーションです。これを使用すると、ライブコード、数式、視覚化、および説明文を含むドキュメントを作成して共有できます。","ノートブックの例#ノートブックの例":" ℹ️ 以下は、プロジェクトの assets フォルダに含まれているノートブックファイルの例です。 What is the Jupyter Notebook? The Jupyter Notebook is an interactive computing environment that enables users to author notebook documents that include:\nLive code Interactive widgets Plots Narrative text Equations Images Video These documents provide a complete and self-contained record of a computation that can be converted to various formats and shared with others using email, version control systems (like Git/GitHub) or nbviewer.jupyter.org.\nData Visualization Below is an example of a simple data visualization using the Seaborn library.\n# Import seaborn import seaborn as sns # Apply the default theme sns.set_theme() # Load an example dataset tips = sns.load_dataset(\"tips\") # Create a visualization sns.relplot( data=tips, x=\"total_bill\", y=\"tip\", col=\"time\", hue=\"smoker\", style=\"smoker\", size=\"size\", ) Matplotlib is building the font cache; this may take a moment. \u003cseaborn.axisgrid.FacetGrid at 0x12830caa0\u003e tips.head() total_bill tip sex smoker day time size 0 16.99 1.01 Female No Sun Dinner 2 1 10.34 1.66 Male No Sun Dinner 3 2 21.01 3.50 Male No Sun Dinner 3 3 23.68 3.31 Male No Sun Dinner 2 4 24.59 3.61 Female No Sun Dinner 4 total_bill tip sex smoker day time size 0 16.99 1.01 Female No Sun Dinner 2 1 10.34 1.66 Male No Sun Dinner 3 2 21.01 3.50 Male No Sun Dinner 3 3 23.68 3.31 Male No Sun Dinner 2 4 24.59 3.61 Female No Sun Dinner 4 Equations The following is an example of a simple equation using LaTeX.\nE=mc2 E = mc^2 E=mc2","使用方法#使用方法":"ローカルノートブックを使用する Jupyter Notebook ショートコードを使用するには、プロジェクト内に Jupyter Notebook ファイルが必要です。画像を追加する方法と同様に、Jupyter Notebook を assets フォルダに追加できます。\nassets notebook.ipynb content docs my-page.md jupyter ショートコードを使用してページに Jupyter Notebook を含めます：\ncontent/docs/my-page.md--- title: My Page math: true --- {{% jupyter \"notebook.ipynb\" %}} あるいは、Hugo の [ページバンドル][page-bundles] 機能を利用して、Jupyter Notebook を Markdown ファイルと一緒に整理することもできます。\ncontent docs my-page index.md notebook.ipynb content/docs/my-page/index.md--- title: My Page math: true --- {{% jupyter \"notebook.ipynb\" %}} リモートノートブックを使用する ノートブックファイルの URL を指定して、リモートノートブックを使用することもできます。たとえば、What is the Jupyter Notebook ノートブックをページに含めるには、次のショートコードを使用します：\n{{% jupyter \"https://raw.githubusercontent.com/jupyter/notebook/main/docs/source/examples/Notebook/What%20is%20the%20Jupyter%20Notebook.ipynb\" %}} "},"title":"Jupyter Notebook"},"/ja/docs/guide/shortcodes/others/":{"data":{"":" ℹ️ これらの一部はHugoの組み込みショートコードです。 これらのショートコードは安定性が低く、いつでも変更される可能性があります。 ","pdf#PDF":"PDFショートコードを使用すると、コンテンツ内にPDFファイルを埋め込むことができます。\n{{\u003c pdf \"https://example.com/sample.pdf\" \u003e}} また、プロジェクトディレクトリ内にPDFファイルを配置し、相対パスを使用することもできます。\n{{\u003c pdf \"path/to/file.pdf\" \u003e}} 例:","youtube#YouTube":"YouTube動画を埋め込みます。\n{{\u003c youtube VIDEO_ID \u003e}} 結果:\n詳細については、HugoのYouTubeショートコードを参照してください。","バッジ#バッジ":" {{\u003c badge \"バッジ\" \u003e}} 結果:\nバッジ バリエーション:\n{{\u003c badge content=\"info\" type=\"info\" \u003e}} {{\u003c badge content=\"warning\" type=\"warning\" \u003e}} {{\u003c badge content=\"error\" type=\"error\" \u003e}} 結果:\ninfo warning error リンクとアイコン付き:\n{{\u003c badge content=\"リリース\" link=\"https://github.com/imfing/hextra/releases\" icon=\"github\" \u003e}} 結果:\nリリース "},"title":"その他"},"/ja/docs/guide/shortcodes/steps/":{"data":{"":"ステップのシリーズを表示するための組み込みコンポーネント。","使い方#使い方":" ℹ️ このショートコードはMarkdownコンテンツ専用であることに注意してください。 HTMLコンテンツや他のショートコードをステップの内容として使用すると、期待通りにレンダリングされない場合があります。 steps ショートコード内にMarkdownのh3ヘッダーを配置します。\n{{% steps %}} ### ステップ 1 これは最初のステップです。 ### ステップ 2 これは2番目のステップです。 {{% /steps %}} ","例#例":" ステップ 1 これは最初のステップです。\nステップ 2 これは2番目のステップです。\nステップ 3 これは3番目のステップです。"},"title":"ステップ"},"/ja/docs/guide/shortcodes/tabs/":{"data":{"":"","使用方法#使用方法":"デフォルト {{\u003c tabs items=\"JSON,YAML,TOML\" \u003e}} {{\u003c tab \u003e}}**JSON**: JavaScript Object Notation (JSON) は、JavaScript オブジェクト構文に基づいた構造化データを表現するための標準的なテキストベースのフォーマットです。{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**YAML**: YAML は人間が読みやすいデータシリアライゼーション言語です。{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**TOML**: TOML は、明らかなセマンティクスにより読みやすい最小限の設定ファイルフォーマットを目指しています。{{\u003c /tab \u003e}} {{\u003c /tabs \u003e}} 選択されたインデックスを指定 defaultIndex プロパティを使用して、選択されるタブを指定します。インデックスは 0 から始まります。\n{{\u003c tabs items=\"JSON,YAML,TOML\" defaultIndex=\"1\" \u003e}} {{\u003c tab \u003e}}**JSON**: JavaScript Object Notation (JSON) は、JavaScript オブジェクト構文に基づいた構造化データを表現するための標準的なテキストベースのフォーマットです。{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**YAML**: YAML は人間が読みやすいデータシリアライゼーション言語です。{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**TOML**: TOML は、明らかなセマンティクスにより読みやすい最小限の設定ファイルフォーマットを目指しています。{{\u003c /tab \u003e}} {{\u003c /tabs \u003e}} YAML タブがデフォルトで選択されます。\nJSONYAMLTOML JSON: JavaScript Object Notation (JSON) は、JavaScript オブジェクト構文に基づいた構造化データを表現するための標準的なテキストベースのフォーマットです。 YAML: YAML は人間が読みやすいデータシリアライゼーション言語です。 TOML: TOML は、明らかなセマンティクスにより読みやすい最小限の設定ファイルフォーマットを目指しています。 Markdown を使用 コードブロックを含む Markdown 構文もサポートされています:\n{{\u003c tabs items=\"JSON,YAML,TOML\" \u003e}} {{\u003c tab \u003e}} ```json { \"hello\": \"world\" } ``` {{\u003c /tab \u003e}} ... 他のタブも同様に追加 {{\u003c /tabs \u003e}} JSONYAMLTOML { \"hello\": \"world\" } hello: world hello = \"world\" ","例#例":" JSONYAMLTOML JSON: JavaScript Object Notation (JSON) は、JavaScript オブジェクト構文に基づいた構造化データを表現するための標準的なテキストベースのフォーマットです。 YAML: YAML は人間が読みやすいデータシリアライゼーション言語です。 TOML: TOML は、明らかなセマンティクスにより読みやすい最小限の設定ファイルフォーマットを目指しています。 "},"title":"タブ"},"/ja/docs/guide/syntax-highlighting/":{"data":{"":"Hugoは、純粋なGoで書かれた汎用シンタックスハイライターであるChromaを使用してシンタックスハイライトを行います。 Markdownコンテンツ内のコードブロックにはバッククォートを使用することを推奨します。例えば：\nMarkdown```python def say_hello(): print(\"Hello!\") ``` は次のようにレンダリングされます：\ndef say_hello(): print(\"Hello!\") ","サポートされている言語#サポートされている言語":"サポートされている言語のリストについては、Chromaのドキュメントを参照してください。","機能#機能":"ファイル名 コードブロックにファイル名やタイトルを追加するには、filename属性を設定します：\nMarkdown```python {filename=\"hello.py\"} def say_hello(): print(\"Hello!\") ``` hello.pydef say_hello(): print(\"Hello!\") ファイルへのリンク New in v0.9.2 base_url属性を使用して、ファイル名と組み合わせてリンクを生成するベースURLを提供できます。\nファイル名には、ベースパス内のファイルの場所を指定する相対パスを含めることができます。\nMarkdown```go {base_url=\"https://github.com/imfing/hextra/blob/main/\",filename=\"exampleSite/hugo.work\"} go 1.20 ``` exampleSite/hugo.workgo 1.20 行番号 行番号を設定するには、linenos属性をtableに設定し、オプションでlinenostartを開始行番号に設定します：\nMarkdown```python {linenos=table,linenostart=42} def say_hello(): print(\"Hello!\") ``` 42 43 def say_hello(): print(\"Hello!\") 行のハイライト 行をハイライトするには、hl_lines属性に行番号のリストを設定します：\nMarkdown```python {linenos=table,hl_lines=[2,4],linenostart=1,filename=\"hello.py\"} def say_hello(): print(\"Hello!\") def main(): say_hello() ``` hello.py 1 2 3 4 5 def say_hello(): print(\"Hello!\") def main(): say_hello() コピーボタン デフォルトでは、コードブロックにコピーボタンが有効になっています。その動作はサイト設定ファイルを変更することで変更できます：\nhugo.yaml 42 43 44 45 46 47 params: highlight: copy: enable: true # hover | always display: hover "},"title":"シンタックスハイライト"}}